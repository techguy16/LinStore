#!/bin/bash

APP_STORE_NAME="LinStore"
APP_STORE_WIDTH=320
APP_STORE_HEIGHT=600

# generic stuff just in case an alternative yad instance exists, for some reason
YAD_COMMAND="yad"
YAD_FLAGS=""

#pwd
if ! command -v "$YAD_COMMAND" &>/dev/null; then
    echo "YAD needs to be installed to run LinStore."
    exit 1
fi

if [ -f "gui" ] || [ -f "createapp" ] || [ -f "settings" ]; then
    cd .
else
    cd ~/.linstore
fi

if [[ $(xrandr --current) =~ "connected primary" ]]; then
    #echo "Dual monitor setup, placing on primary monitor"
    resolution=$(xrandr --current | grep " connected primary" | awk '{print $4}' | cut -d'+' -f1)
else
    #echo "Single monitor setup, no primary monitor"
    resolution=$(xrandr --current | grep " connected" | awk '{print $3}' | cut -d'+' -f1)
fi

horizontal=$(echo $resolution | cut -d'x' -f1)
vertical=$(echo $resolution | cut -d'x' -f2)
let "categoryPos=$horizontal/2-360"
let "categoryPosY=$vertical/2-340"

declare -A categories
declare -A category_apps

detect_and_write_architecture() {
    mkdir -p ~/.linstore
    case "$(uname -m)" in
    x86_64)
        echo "x64" >~/.linstore/architecture.txt
        ;;
    i686)
        echo "x86" >~/.linstore/architecture.txt
        ;;
    armv7l)
        echo "32" >~/.linstore/architecture.txt
        ;;
    aarch64)
        echo "64" >~/.linstore/architecture.txt
        ;;
    *)
        echo "Unknown architecture" >~/.linstore/architecture.txt
        ;;
    esac
}

list_piapps() {
    piapps_file="etc/pi-apps-import"
    if [ -e "$piapps_file" ]; then
        cat "$piapps_file"
    else
        echo ""
    fi
}

read_categories() {
    while read -r category; do
        categories["$category"]=""
    done <etc/categories
    
    for app_dir in "${1}"/*; do
        app_name=$(basename "${app_dir}")

        if [ ! -e "${1}/$app_name/category" ]; then
            escaped_app_name=$(echo "$app_name" | sed 's/([\/.^$*+?|{}\[])/\\&/g')
            data=$(grep -E "$escaped_app_name" etc/piapps-categories | awk -F"|" '{print $2}')
            if [ -n "$data" ]; then
                data2=$(grep -E "$data" etc/mapping | awk -F"|" '{print $2}')
                if [ -n "$data2" ]; then
                    echo "$data2" > "${1}/$app_name/category"
                    category_file="${1}/$app_name/category"
                else
                    continue
                fi
            else
                continue
            fi
        fi

        category_file="${1}/$app_name/category"
        install_script="$app_dir/install"

        # Check if the install script or architecture-specific install scripts exist for this app
        if [ -e "$install_script" ]; then
            while IFS= read -r app_in_category; do
                # Make sure $app_in_category is not empty before accessing the array
                if [ -n "$app_in_category" ]; then
                    if [ -n "${categories[$app_in_category]}" ]; then
                        categories["$app_in_category"]+=" $app_name"
                        category_apps["$app_in_category"]+="|$app_name"
                    else
                        categories["$app_in_category"]="$app_name"
                        category_apps["$app_in_category"]="$app_name"
                    fi
                fi
                break
            done <"$category_file"
        else
            architecture=$(cat ~/.linstore/architecture.txt)
            install_script_arch="install-$architecture"

            if [ -e "$app_dir/$install_script_arch" ]; then
                while IFS= read -r app_in_category; do
                    # Make sure $app_in_category is not empty before accessing the array
                    if [ -n "$app_in_category" ]; then
                        if [ -n "${categories[$app_in_category]}" ]; then
                            categories["$app_in_category"]+=" $app_name"
                            category_apps["$app_in_category"]+="|$app_name"
                        else
                            categories["$app_in_category"]="$app_name"
                            category_apps["$app_in_category"]="$app_name"
                        fi
                    fi
                    break
                done <"$category_file"
            fi
        fi
    done
}


get_app_description() {
    app_name="$1"
    description_file="apps/$app_name/description"
    if [ -e "$description_file" ]; then
        cat "$description_file"
    else
        echo "No description available."
    fi
}

get_app_creator() {
    app_name="$1"
    creator_file="apps/$app_name/creator"
    if [ -e "$creator_file" ]; then
        cat "$creator_file"
    else
        echo "No description available."
    fi
}

get_app_website() {
    app_name="$1"
    website_file="apps/$app_name/website"
    if [ -e "$website_file" ]; then
        cat "$website_file"
    else
        echo "No description available."
    fi
}
theme_get() {
    website_file="etc/theme"
    if [ -e "$website_file" ]; then
        cat "$website_file"
    else
        echo ""
    fi
}
theme=$(theme_get)

###################################
# Graphical environments go below #

multi_install() {
    all_apps_list=()
    for app_dir in apps/*; do
        app_name=$(basename "$app_dir")
        if [ -e "$app_dir/install" ] || [ -e "$app_dir/install-$(cat ~/.linstore/architecture.txt)" ]; then
            app_icon="apps/$app_name/icon-24.png"
            all_apps_list+=("FALSE")
            all_apps_list+=("$app_icon")
            all_apps_list+=("$app_name")
        fi
    done

    APPS=$(GTK_THEME="${theme}" GDK_BACKEND=x11 $YAD_COMMAND --text "<big><b>Multi Installer</b></big>\nInstall multiple apps at once" --geometry=600x${APP_STORE_HEIGHT} --center --columns="3" \
        --list --checklist --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "LinStore" --column="Select":chk --column "Icon:IMG" --column "Apps" \
        --button="Install"!images/button/install.png!:0 "${all_apps_list[@]}" --no-headers)

    list=""
    while IFS= read -r line; do
        list+="$(echo -e "$line" | awk -F "|" '{print $3}')"
        list+=$'\n'
    done <<< "$APPS"
    echo "$list"
    ./manage multi-install "$list"
}

app_details_page() {
    kill $(pgrep -f "title=App Details") > /dev/null 2>&1
    sleep 0.1
    pos=$(wmctrl -lG | grep "LinStore" | awk '{print $3,$4}')
    x2=$((horizontal / 2 - 40))
    y2=$((vertical / 2 - 340))

    if [ -e "$HOME/.linstore/installscripts/${1//|/}" ]; then
        installed="true"
    else
        installed="false"
    fi

    TITLE="App Details"
    wmctrl -l | grep "$TITLE" | awk '{print $1}' | while read -r window_id; do
        wmctrl -ic "$window_id" > /dev/null 2>&1
    done

    local selected_app_name="${1//|/}"
    local app_directory="apps/$selected_app_name"
    local app_icon="$app_directory/icon-48.png"
    local description=$(get_app_description "$selected_app_name")
    local creator=$(get_app_creator "$selected_app_name")
    local website=$(get_app_website "$selected_app_name")

    local install_command=$(./api install "$app_directory" "$selected_app_name")
    local uninstall_command=$(./api uninstall "$app_directory" "$selected_app_name")

    local open_command=$(./api open "$app_directory")
    buttons=()

    if [[ "$installed" == "true" ]]; then
        displayName="<b>${selected_app_name}</b> (<i>installed</i>)"
        buttonText="Uninstall"
        buttonImage="images/button/uninstall.png"
        # Create a temporary script for the commands
        temp_script=$(mktemp)
        echo "$uninstall_command && rm -rf \"$HOME/.linstore/installscripts/$selected_app_name\"" >"$temp_script"
        chmod +x "$temp_script"
        buttonCommand="bash -c 'bash $temp_script; rm $temp_script'"
        if [[ "$open_command" != "" ]]; then
            buttons+=("--button=<b>Open</b>!system-run:$open_command")
        fi
    else
        displayName="<b>${selected_app_name}</b> (<i>not installed</i>)"
        buttonText="<b>Install</b>"
        buttonImage="images/button/install.png"
        buttonCommand="$install_command"
    fi

    if [[ "$open" != "" ]]; then
        buttons+=("--button=Open!system-run:$open")
    fi

    if [[ -f "$app_directory/donate" ]]; then
        donate="Help out the developer by <a href='$(cat $app_directory/donate)'>donating</a>!\n"
    else
        donate=""
    fi

    (
        GDK_BACKEND=x11 $YAD_COMMAND --class LinStore --title="App Details" --geometry=450x${APP_STORE_HEIGHT}+${x2}+${y2} --form \
            --text "<big>${displayName}</big>\nBy <b>${creator}</b> (<a href='${website}'>App Website</a>)\n${donate}" \
            --field="<b>Description</b>:TXT" --no-edit "$description" --image="$app_icon" --window-icon="images/logo/logo-64.png" --image-on-top \
            --button="$buttonText!$buttonImage:$buttonCommand" "${buttons[@]}" --skip-taskbar --noclose
    )

    rm -f /tmp/description.tmp
}

show_categories() {
    list_items=()
    for category in "${!categories[@]}"; do
        category_icon="images/$category.png"
        list_items+=("$category_icon")
        list_items+=("$category")
    done

    selected_category_raw=$(GTK_THEME="${theme}" GDK_BACKEND=x11 $YAD_COMMAND --text "Welcome to LinStore\nThe app store that's simple to use." --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="2" \
        "${list_items[@]}" \
        --list --image="images/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "Show Apps:3" --button "Settings:4" --item-padding="10")

    selected_category="${selected_category_raw//|/}"
    ./api info "Selected Item: $(echo \"$selected_category\" | tr '\n' '|')"
}

show_apps_in_category() {
    while true; do
        if [ "$1" == "All Apps" ]; then
            # Show all apps in the "All Apps" category
            all_apps_list=()
            for app_dir in apps/*; do
                app_name=$(basename "$app_dir")
                if [ -e "$app_dir/install" ] || [ -e "$app_dir/install-$(cat ~/.linstore/architecture.txt)" ]; then
                    app_icon="apps/$app_name/icon-24.png"
                    all_apps_list+=("$app_icon")
                    all_apps_list+=("$app_name")
                fi
            done

            GTK_THEME="${theme}" GDK_BACKEND=x11 $YAD_COMMAND --text "<big><b>$1</b></big>" --geometry=${APP_STORE_WIDTH}x${APP_STORE_HEIGHT}+${categoryPos}+${categoryPosY} --center --columns="2" \
                --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "LinStore" --column "Icon:IMG" --column "Apps" \
                --button="Back"!images/button/back.png!:4 --separator="\n" "${all_apps_list[@]}" --no-headers \
                --select-action='bash -c "./gui showdetails \"%s\""' > /dev/null 2>&1
        else
            apps_in_category="${category_apps["$1"]}"
            formatted_apps=()

            IFS='|' read -r -a app_list <<<"$apps_in_category"
            for app in "${app_list[@]}"; do
                app_icon="apps/$app/icon-24.png"
                formatted_apps+=("$app_icon")
                formatted_apps+=("$app")
            done

            GTK_THEME="${theme}" GDK_BACKEND=x11 $YAD_COMMAND --text "<big><b>Apps in $1 Category</b></big>" --geometry=${APP_STORE_WIDTH}x${APP_STORE_HEIGHT}+${categoryPos}+${categoryPosY} --center --columns="2" \
                --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "LinStore" --column "Icon:IMG" --column "Apps" \
                --button="Back"!images/button/back.png!:4 --separator="\n" "${formatted_apps[@]}" --no-headers \
                --select-action='bash -c "./gui showdetails \"%s\""' > /dev/null 2>&1
        fi

        button_clicked=$?
        if [ $button_clicked -eq 4 ]; then
            show_app_store
            break
        fi

        show_app_store
        break
    done
}

show_app_store() {
    read_categories "apps"
    if [[ "$use_piapps" == "TRUE" ]]; then
        read_categories "/home/${USER}/pi-apps/apps"
    fi

    # Sort categories alphabetically and format with newlines
    sorted_categories=$(printf '%s\n' "${!categories[@]}" | sort)

    list_items=()
    list_items=("images/categories/All Apps.png" "All Apps")
    while IFS= read -r category; do
        category_icon="images/categories/$category.png" # Path to category icons
        list_items+=("$category_icon")
        list_items+=("$category")
    done <<<"$sorted_categories"

    # Fetching a random line from the announcements file
    random_announcement=$(shuf -n 1 etc/announcements)

    # Search function

    selected_category_raw=$(GTK_THEME="${theme}" GDK_BACKEND=x11 $YAD_COMMAND --text "$random_announcement" --geometry=${APP_STORE_WIDTH}x${APP_STORE_HEIGHT}+${categoryPos}+${categoryPosY} --center --columns="3" \
        "${list_items[@]}" \
        --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "!images/button/search.png"!"Search":"bash -c './api search'" --button "!images/button/update.png"!"Updates":"bash -c './update'" --button "!images/button/settings.png"!"Settings":"bash -c './settings'" --no-headers --item-height="$welcome_height" --timeout=0 --no-close)
    exval=$?
    ./api info "Exit value: ${exval}"
    selected_category="${selected_category_raw//|/}"

    if [ "$exval" == "44" ]; then
        ./api search && show_app_store
    elif [ "$exval" -eq "143" ]; then
        pkill -f "yad*" > /dev/null 2>&1
    elif [ "$exval" -eq "252" ]; then
        pkill -f "yad*" > /dev/null 2>&1
    elif [ -n "$selected_category" ]; then
        show_apps_in_category "$selected_category"
    fi
}

if [[ $1 == "" ]]; then
    ./api logo
    ./api buildinfo
    echo ""
    use_piapps=$(list_piapps)
    ./api warning "Is LinStore able to use Pi-Apps' library? ${use_piapps}"
fi

if [[ $1 == "showdetails" ]]; then
    if [ -e /tmp/tmpname ]; then
        app_details_page "$(cat /tmp/tmpname && rm -r /tmp/tmpname)"
    else
        app_details_page "$(echo $2 | awk -F"'" '{print $4}')"
    fi
elif [[ $1 == "multi-install" ]]; then
    multi_install
else
    detect_and_write_architecture
    show_app_store
fi
