#!/bin/bash

APP_STORE_NAME="LinStore"
APP_STORE_WIDTH=320
APP_STORE_HEIGHT=600
pwd
if ! command -v yad &>/dev/null; then
    error "YAD needs to be installed to run LinStore."
fi
if [ -f "gui" ] || [ -f "createapp" ] || [ -f "settings" ]; then
    cd .
else
    cd ~/.linstore
fi

declare -A categories
declare -A category_apps

detect_and_write_architecture() {
    mkdir -p ~/.linstore
    case "$(uname -m)" in
    x86_64)
        echo "x64" >~/.linstore/architecture.txt
        ;;
    i686)
        echo "x86" >~/.linstore/architecture.txt
        ;;
    armv7l)
        echo "32" >~/.linstore/architecture.txt
        ;;
    aarch64)
        echo "64" >~/.linstore/architecture.txt
        ;;
    *)
        echo "Unknown architecture" >~/.linstore/architecture.txt
        ;;
    esac
}

read_categories() {
    while read -r category; do
        categories["$category"]=""
    done <etc/categories

    for app_dir in apps/*; do
        app_name=$(basename "$app_dir")
        category_file="apps/$app_name/category"
        install_script="$app_dir/install"

        # Check if the install script or architecture-specific install scripts exist for this app
        if [ -e "$install_script" ]; then
            while IFS= read -r app_in_category; do
                if [ -n "${categories[$app_in_category]}" ]; then
                    categories["$app_in_category"]+=" $app_name"
                    category_apps["$app_in_category"]+="|$app_name"
                else
                    categories["$app_in_category"]="$app_name"
                    category_apps["$app_in_category"]="$app_name"
                fi
            done <"$category_file"
        else
            architecture=$(cat ~/.linstore/architecture.txt)
            install_script_arch="install-$architecture"

            if [ -e "$app_dir/$install_script_arch" ]; then
                while IFS= read -r app_in_category; do
                    if [ -n "${categories[$app_in_category]}" ]; then
                        categories["$app_in_category"]+=" $app_name"
                        category_apps["$app_in_category"]+="|$app_name"
                    else
                        categories["$app_in_category"]="$app_name"
                        category_apps["$app_in_category"]="$app_name"
                    fi
                done <"$category_file"
            fi
        fi
    done
}

get_app_description() {
    app_name="$1"
    description_file="apps/$app_name/description"
    if [ -e "$description_file" ]; then
        cat "$description_file"
    else
        echo "No description available."
    fi
}

get_app_creator() {
    app_name="$1"
    creator_file="apps/$app_name/creator"
    if [ -e "$creator_file" ]; then
        cat "$creator_file"
    else
        echo "No description available."
    fi
}

get_app_website() {
    app_name="$1"
    website_file="apps/$app_name/website"
    if [ -e "$website_file" ]; then
        cat "$website_file"
    else
        echo "No description available."
    fi
}
theme_get() {
    website_file="etc/theme"
    if [ -e "$website_file" ]; then
        cat "$website_file"
    else
        echo ""
    fi
}
theme=$(theme_get)

app_details_page() {
    sleep 0.1
    pos=$(wmctrl -lG | grep "Category" | awk '{print $3,$4}')
    x=$(echo "$pos" | cut -d' ' -f1)
    y=$(echo "$pos" | cut -d' ' -f2)
    x2=$((x + 313)) # Adjust this value as needed to position the second dialog
    y2=$((y - 82))  # Adjust this value as needed to position the second dialog
    echo $x2
    echo $y2

    local selected_app_name="${1//|/}"
    local app_directory="apps/$selected_app_name"
    local app_icon="$app_directory/icon-48.png"
    echo $app_directory
    local description=$(get_app_description "$selected_app_name")
    local creator=$(get_app_creator "$selected_app_name")
    local website=$(get_app_website "$selected_app_name")
    local installed_file="$HOME/.linstore/installed"
    local uninstalled_file="$HOME/.linstore/uninstalled"
    local theme="your_theme_name_here" # Replace with your GTK theme name
    local password
    local sudo_prefix=""

    if [ -e "$app_directory/install" ]; then
        # 'install' script exists - Install for all architectures
        temp_script=$(mktemp)
        echo "cd \"$app_directory\" && chmod +x install && ./install && echo \"$selected_app_name\" >> \"$installed_file\" && echo \"$selected_app_name is installed\" && mkdir -p ~/.linstore/installscripts && cat install > \"~/.linstore/installscripts/${selected_app_name}\"" >"$temp_script"
        install_command="x-terminal-emulator -e \"sudo bash $temp_script\""
    else
        architecture=$(cat "$HOME/.linstore/architecture.txt")
        install_script="install-$architecture"

        if [ -e "$app_directory/$install_script" ]; then
            # Architecture-specific installation script exists - Install for the detected architecture
            temp_script=$(mktemp)
            echo "cd \"$app_directory\" && chmod +x \"$install_script\" && ./\"$install_script\" && echo \"$selected_app_name\" >> \"$installed_file\" && echo \"$selected_app_name is installed\" && mkdir -p ~/.linstore/installscripts && cat \"$install_script\" > \"~/.linstore/installscripts/${selected_app_name}\"" >"$temp_script"
            install_command="x-terminal-emulator -e \"sudo bash $temp_script\""
        else
            if [ -e "$app_directory/packages" ]; then
                temp_script=$(mktemp)
                echo "cd \"$app_directory\" && sudo apt update && sudo apt install \$(cat \"$app_directory/packages\") && echo \"$selected_app_name\" >> \"$installed_file\" && echo \"$selected_app_name is installed\" && mkdir -p ~/.linstore/installscripts && cat packages > \"~/.linstore/installscripts/${selected_app_name}\"" >"$temp_script"
                install_command="x-terminal-emulator -e \"sudo bash $temp_script\""
            else
                install_command="echo 'Installation script not found for this architecture.'"
            fi
        fi
    fi

    if [ -e "$app_directory/uninstall" ]; then
        # 'uninstall' script exists - Uninstall for all architectures
        temp_script=$(mktemp)
        echo "cd \"$app_directory\" && chmod +x uninstall && ./uninstall && echo \"$selected_app_name\" >> \"$uninstalled_file\" && echo \"$selected_app_name has been uninstalled\"" >"$temp_script"
        uninstall_command="x-terminal-emulator -e \"sudo bash $temp_script\""
    else
        architecture=$(cat "$HOME/.linstore/architecture.txt")
        uninstall_script="uninstall-$architecture"

        if [ -e "$app_directory/$uninstall_script" ]; then
            # Architecture-specific uninstallation script exists - Uninstall for the detected architecture
            temp_script=$(mktemp)
            echo "cd \"$app_directory\" && chmod +x \"$uninstall_script\" && ./\"$uninstall_script\" && echo \"$selected_app_name\" >> \"$uninstalled_file\" && echo \"$selected_app_name has been uninstalled\"" >"$temp_script"
            uninstall_command="x-terminal-emulator -e \"sudo bash $temp_script\""
        else
            if [ -e "$app_directory/packages" ]; then
                temp_script=$(mktemp)
                echo "cd \"$app_directory\" && sudo apt update && sudo apt remove \$(cat \"$app_directory/packages\") && echo \"$selected_app_name\" >> \"$uninstalled_file\" && echo \"$selected_app_name has been uninstalled\"" >"$temp_script"
                uninstall_command="x-terminal-emulator -e \"sudo bash $temp_script\""
            else
                uninstall_command="echo 'Uninstallation script not found for this architecture.'"
            fi
        fi
    fi

    # Run yad command in the background without waiting for it to finish
    (
        yad --class LinStore --title="App Details" --geometry=450x${APP_STORE_HEIGHT}+${x2}+${y2} --close-on-unfocus --form \
            --text "<big><b>${selected_app_name}</b></big>\n<b>${creator}</b>\n<b><a href='${website}'>${website}</a></b>\n" \
            --field="<b>Description</b>:TXT" --no-edit "$description" --image="$app_icon" --window-icon="images/logo/logo-64.png" --image-on-top \
            --button="Install":"$install_command" --button="Uninstall":"$uninstall_command"
    )

    # Cleanup temporary files
    rm -f /tmp/description.tmp
}

show_categories() {
    list_items=()
    for category in "${!categories[@]}"; do
        category_icon="images/$category.png"
        list_items+=("$category_icon")
        list_items+=("$category")
    done

    selected_category_raw=$(GTK_THEME="${theme}" yad --text "Welcome to LinStore\nThe app store that's simple to use." --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --columns="2" \
        "${list_items[@]}" \
        --list --image="images/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "Show Apps:3" --button "Settings:4" --item-padding="10")

    selected_category="${selected_category_raw//|/}"
    echo "$selected_category"
}

show_apps_in_category() {
    while true; do
        if [ "$1" == "All Apps" ]; then
            # Show all apps in the "All Apps" category
            all_apps_list=()
            for app_dir in apps/*; do
                app_name=$(basename "$app_dir")
                app_icon="apps/$app_name/icon-24.png"
                all_apps_list+=("$app_icon")
                all_apps_list+=("$app_name")
            done

            GTK_THEME="${theme}" yad --text "<big><b>$1</b></big>" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --center --columns="2" \
                --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "All Apps Category" --column "Icon:IMG" --column "Apps" \
                --button="!images/button/back.png!Back:4" --separator="\n" "${all_apps_list[@]}" --no-headers \
                --select-action='bash -c "./gui showdetails \"%s\""'
        else
            apps_in_category="${category_apps["$1"]}"
            formatted_apps=()

            IFS='|' read -r -a app_list <<<"$apps_in_category"
            for app in "${app_list[@]}"; do
                app_icon="apps/$app/icon-24.png"
                formatted_apps+=("$app_icon")
                formatted_apps+=("$app")
            done

            GTK_THEME="${theme}" yad --text "<big><b>Apps in $1 Category</b></big>" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --center --columns="2" \
                --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "$1 Category" --column "Icon:IMG" --column "Apps" \
                --button="!images/button/back.png!Back:4" --separator="\n" "${formatted_apps[@]}" --no-headers \
                --dclick-action='bash -c "./gui showdetails \"%s\""'
        fi

        button_clicked=$?
        if [ $button_clicked -eq 4 ]; then
            show_app_store
            break
        fi

        show_app_store
        break
    done
}

show_app_store() {
    read_categories

    # Sort categories alphabetically and format with newlines
    sorted_categories=$(printf '%s\n' "${!categories[@]}" | sort)

    list_items=()
    list_items=("images/categories/All Apps.png" "All Apps")
    while IFS= read -r category; do
        category_icon="images/categories/$category.png" # Path to category icons
        list_items+=("$category_icon")
        list_items+=("$category")
    done <<<"$sorted_categories"

    # Fetching a random line from the announcements file
    random_announcement=$(shuf -n 1 etc/announcements)

    # Search function

    selected_category_raw=$(GTK_THEME="${theme}" yad --text "$random_announcement" --width="$APP_STORE_WIDTH" --height="$APP_STORE_HEIGHT" --center --columns="3" \
        "${list_items[@]}" \
        --list --image="images/logo/logo-64.png" --window-icon="images/logo/logo-64.png" --image-on-top --title "$APP_STORE_NAME" --column "Icon:IMG" --column "Category" --button "!images/button/search.png"!"Search":"bash -c './api search'" --button "!images/button/settings.png"!"Settings":"bash -c './settings'" --no-headers --item-height="$welcome_height" --timeout=0 --no-close)
    exval=$?
    selected_category="${selected_category_raw//|/}"

    if [ "$exval" == "44" ]; then
        ./api search && show_app_store
    elif [ -n "$selected_category" ]; then
        show_apps_in_category "$selected_category"
    fi
}

if [[ $1 == "showdetails" ]]; then
    app_details_page "$(echo $2 | awk -F"'" '{print $4}')"
else
    detect_and_write_architecture
    show_app_store
fi
